{"version":3,"file":"static/js/366.00379229.chunk.js","mappings":"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","sources":["../node_modules/@react-three/drei/core/Stars.js","views/Home/components/HomeScene/HomeScene.tsx","views/Home/HomeView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Color, Vector3, Spherical, AdditiveBlending, ShaderMaterial } from 'three';\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader:\n      /* glsl */\n      `\n      uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n      fragmentShader:\n      /* glsl */\n      `\n      uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n\n        #include <tonemapping_fragment>\n\t      #include <encodings_fragment>\n      }`\n    });\n  }\n\n}\n\nconst genStar = r => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\n\nconst Stars = /*#__PURE__*/React.forwardRef(({\n  radius = 100,\n  depth = 50,\n  count = 5000,\n  saturation = 0,\n  factor = 4,\n  fade = false,\n  speed = 1\n}, ref) => {\n  const material = React.useRef();\n  const [position, color, size] = React.useMemo(() => {\n    const positions = [];\n    const colors = [];\n    const sizes = Array.from({\n      length: count\n    }, () => (0.5 + 0.5 * Math.random()) * factor);\n    const color = new Color();\n    let r = radius + depth;\n    const increment = depth / count;\n\n    for (let i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push(...genStar(r).toArray());\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]);\n  useFrame(state => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime() * speed));\n  const [starfieldMaterial] = React.useState(() => new StarfieldMaterial());\n  return /*#__PURE__*/React.createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", null, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-position\",\n    args: [position, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-color\",\n    args: [color, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-size\",\n    args: [size, 1]\n  })), /*#__PURE__*/React.createElement(\"primitive\", {\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    transparent: true,\n    vertexColors: true\n  }));\n});\n\nexport { Stars };\n","import React, {Suspense, useRef} from 'react';\nimport PropTypes from 'prop-types';\nimport {Canvas, useFrame} from '@react-three/fiber';\nimport {useGLTF, Stars} from '@react-three/drei';\nimport styled, {useTheme} from 'styled-components';\nimport {Mesh} from 'three';\nimport {CameraControls} from 'utils';\nimport useMediaQuery from 'hooks/useMediaQuery';\nimport endpoints from 'api/endpoints';\n\nconst CanvasWrapper = styled.div`\n  height: 100vh;\n  position: absolute;\n  inset: 0;\n  z-index: 0;\n`;\n\ntype EarthModelProps = {\n  isBigScreen: boolean;\n};\n\nexport const EarthModel = ({isBigScreen}: EarthModelProps) => {\n  const earthRef = useRef<Mesh>(null!);\n\n  const earthPosition = isBigScreen ? [2.5, -0.3, 0] : [0, -1.5, 0];\n  const earthScale = isBigScreen ? 0.003 : 0.0025;\n\n  const gltf = useGLTF(endpoints.models + 'Earth.glb');\n\n  useFrame(() => {\n    earthRef.current!.rotation.y += 0.0005;\n  });\n\n  return (\n    <primitive ref={earthRef} object={gltf.scene} position={earthPosition} scale={earthScale} />\n  );\n};\n\nEarthModel.propTypes = {\n  isBigScreen: PropTypes.bool.isRequired,\n};\n\nexport default function HomeScene() {\n  const theme = useTheme();\n  const isBigScreen = useMediaQuery(theme.breakPoints.desktopUp);\n\n  return (\n    <CanvasWrapper>\n      <Canvas camera={{fov: 30}}>\n        <CameraControls />\n        <directionalLight position={[-5, 5, 5]} color=\"white\" />\n        <Stars radius={100} depth={50} count={6000} factor={6} saturation={0} fade speed={1} />\n        <Suspense fallback={null}>\n          <EarthModel isBigScreen={isBigScreen} />\n        </Suspense>\n      </Canvas>\n    </CanvasWrapper>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport {mediaQuery} from 'theme';\nimport {motion, AnimatePresence, Variants} from 'framer-motion';\nimport {GridContainer, LargeButton, Page, SkipToContent} from 'components';\nimport {HomeScene} from './components';\nimport {useAppData} from 'contexts';\n\nconst HomeGrid = styled(GridContainer).attrs({\n  as: 'main',\n})`\n  z-index: 1;\n  height: 100%;\n  ${({theme}) =>\n    mediaQuery(\n      theme.breakPoints.desktopUp,\n      `\n    padding-bottom: max(6rem, 20vh);\n    align-items: end;\n\n    & > *:first-child {\n      grid-column: 2;\n    }\n\n    & > *:last-child {\n      grid-column: 3;\n    }\n  `,\n    )}\n`;\n\nconst StyledH1 = styled.h1`\n  ${({theme}) => `\n   ${theme.utils.typography.color.accent}\n   ${theme.utils.typography.size[500]}\n   ${theme.utils.typography.family.sansCond}\n   ${theme.utils.typography.letterSpacing[1]}\n   ${theme.utils.typography.uppercase}\n`}\n`;\n\nconst StyledSpan = styled.span`\n  ${({theme}) => `\n    ${theme.utils.general.block}\n    ${theme.utils.typography.size[900]}\n    ${theme.utils.typography.family.serif}\n    ${theme.utils.typography.color.white}\n    ${theme.utils.typography.uppercase}\n  `}\n`;\n\nconst homeVariants: Variants = {\n  hidden: {\n    opacity: 0,\n    transition: {\n      when: 'afterChildren',\n      staggerChildren: 0.8,\n      staggerDirection: -1,\n    },\n  },\n  visible: {\n    opacity: 1,\n    transition: {\n      when: 'beforeChildren',\n      staggerChildren: 0.8,\n      staggerDirection: 1,\n    },\n  },\n};\n\nconst introVariants: Variants = {\n  hidden: {\n    y: -10,\n    opacity: 0,\n    transition: {\n      duration: 0.5,\n    },\n  },\n  visible: {\n    y: 0,\n    opacity: 1,\n    transition: {\n      duration: 0.5,\n    },\n  },\n};\n\nconst MotionSpan = motion(StyledSpan);\nconst MotionTitle = motion(StyledH1);\n\nconst MotionPage = motion(Page);\n\nexport default function HomeView(): JSX.Element {\n  const {destinations} = useAppData();\n\n  return (\n    <AnimatePresence>\n      <MotionPage\n        initial=\"hidden\"\n        animate=\"visible\"\n        exit=\"hidden\"\n        variants={homeVariants}\n        title=\"Home\"\n      >\n        <SkipToContent hash=\"#explore\" />\n        <HomeGrid>\n          <div>\n            <MotionTitle variants={introVariants}>So, you want to travel to</MotionTitle>\n            <MotionSpan variants={introVariants}>Space</MotionSpan>\n            <motion.p variants={introVariants}>\n              Let’s face it; if you want to go to space, you might as well genuinely go to outer\n              space and not hover kind of on the edge of it. Well sit back, and relax because we’ll\n              give you a truly out of this world experience!\n            </motion.p>\n          </div>\n          <div>\n            <LargeButton id=\"explore\" to={`/destinations/${destinations[0].slug}`}>\n              Explore\n            </LargeButton>\n          </div>\n        </HomeGrid>\n        <HomeScene />\n      </MotionPage>\n    </AnimatePresence>\n  );\n}\n"],"names":["StarfieldMaterial","uniforms","time","value","fade","vertexShader","fragmentShader","ShaderMaterial","genStar","r","Vector3","setFromSpherical","Spherical","Math","acos","random","PI","Stars","React","ref","radius","depth","count","saturation","factor","speed","material","positions","colors","sizes","Array","from","length","color","Color","increment","i","push","toArray","setHSL","g","b","Float32Array","position","size","useFrame","state","current","clock","getElapsedTime","starfieldMaterial","attach","args","object","blending","AdditiveBlending","transparent","vertexColors","CanvasWrapper","styled","EarthModel","isBigScreen","earthRef","useRef","earthPosition","earthScale","gltf","useGLTF","endpoints","rotation","y","scene","scale","HomeScene","theme","useTheme","useMediaQuery","breakPoints","desktopUp","camera","fov","Suspense","fallback","HomeGrid","GridContainer","attrs","as","mediaQuery","StyledH1","utils","typography","accent","family","sansCond","letterSpacing","uppercase","StyledSpan","general","block","serif","white","homeVariants","hidden","opacity","transition","when","staggerChildren","staggerDirection","visible","introVariants","duration","MotionSpan","motion","MotionTitle","MotionPage","Page","HomeView","destinations","useAppData","AnimatePresence","initial","animate","exit","variants","title","hash","id","to","slug"],"sourceRoot":""}